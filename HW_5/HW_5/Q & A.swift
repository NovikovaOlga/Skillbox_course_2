
import Foundation

/*
 ---------------------------------------------------------
 1. Сыграйте в игру на понимание ошибок мультипоточности.
----------------------------------------------------------
 2. Прочитайте дополнительную теорию: https://apptractor.ru/info/articles/osnovyi-parallelnogo-programmirovaniya-v-swift-chast-1.html, https://medium.com/@gabriel_lewis/threading-in-swift-simply-explained-5c8dd680b9b2 и https://hackernoon.com/swift-multi-threading-using-gcd-for-beginners-2581b7aa21cb.
-------------------------------------------------------------
 3. Напишите, какими бывают типы потоков и в чём их различие.
  .userInteractive — для задач, которые взаимодействуют с пользователем (анимация, обработка событий или обновление пользовательского интерфейса вашего приложения). Срок выполнения: мгновенно. */ let userInteractiveQueue = DispatchQueue.global(qos: .userInteractive) /*
  .userInitiated — для задач, которые инициируются пользователем и требуют обратной связи (не позволяют пользователю активно использовать ваше приложение). Срок выполнения: почти мгновенно, несколько секунд и меньше. */ let userInitiatedQueue = DispatchQueue.global(qos: .userInitiated) /*
 .default — для задач, не связанных с визуализацией и не критичных ко времени исполнения. Срок выполнения: рассчитывается системой. Лучше не использовать. */ let defaultQueue = DispatchQueue.global(qos: .default) /*
  .utility — для задач, требующих некоторого времени для выполнения и не требуют немедленной обратной связи (которые пользователь не отслеживает активно). Срок выполнения: от нескольких секунд, до нескольких минут. */ let utilityQueue = DispatchQueue.global(qos: .utility) /*
  .background — для задач, не связанных с визуализацией и не критичных ко времени исполнения (задач обслуживания или очистки). Срок выполнения: значительное время, минуты или часы. */  let backgroundQueue = DispatchQueue.global(qos: .background) /*
 .unspecified — отсутствие класса качества обслуживания (не используем). */ let unspecifiedQueue = DispatchQueue.global(qos: .unspecified) /*
--------------------------------------------------------------
 4. Опишите различие Dispatch Queue, Operation Queues и Run Loops.
 Dispatch Queue - добавление задачи и ожидание, что она будет выполнена в какой-то момент.SerialQueue - все будет обработано в том же порядке, в каком было добавлено в очередь. ConcurrentQueue - задачи в этой очереди могут выполняться конкурентно.
 Operation Queues - вместо блока дискретных единиц работы создаются операции, которые помещаются в очередь, а затем выполненяются в правильном порядке. Основная очередь, которая выполняется в основном треде, пользовательские очереди, которые не выполняются в основном треде.
 Run Loops - похожи на очереди. Система проходит по всем работам в очереди и затем начинает с начала. Например, экранная перерисовка выполняется в Run Loop.
--------------------------------------------------------------
 */
